name: ci
on:
  push:
    branches:
      - master
      - main
permissions:
  contents: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      - run: |
          python -m pip install -e .[docs]
          pip install -e .
      - name: Generate API Documentation
        run: |
          python generate_api_docs.py
      - name: Extract Version
        run: |
          # Get version from SCM (setuptools_scm)
          python -c "from torchebm._version import version; print(f'VERSION={version}')" >> $GITHUB_ENV
      - name: Build Documentation
        run: |
          mkdocs build
      - name: Setup gh-pages branch
        run: |
          # Initialize gh-pages branch if it doesn't exist locally
          git fetch origin gh-pages || true
          if ! git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            # If gh-pages doesn't exist on remote, create it
            git checkout --orphan gh-pages
            git rm -rf .
            touch .nojekyll
            git add .nojekyll
            git commit -m "Initialize gh-pages branch"
            git push -u origin gh-pages
            git checkout -
          else
            # If it exists, make sure we have it locally
            git fetch origin gh-pages:gh-pages || true
          fi
      - name: Deploy with Version
        run: |
          # Extract clean version without build metadata
          CLEAN_VERSION=$(echo $VERSION | cut -d'+' -f1)
          
          # Ensure gh-pages is up to date
          git fetch origin gh-pages
          git checkout gh-pages
          git pull --rebase origin gh-pages || true
          git checkout -
          
          mike delete --push latest || true  # Delete the existing latest alias if it exists
          # Deploy with Mike
          mike deploy --push --update-aliases --prefix=/{version} $CLEAN_VERSION latest
          
          mike set-default --push latest