name: docs_ci
on:
  push:
    branches:
      - master
      - main
permissions:
  contents: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      - run: |
          python -m pip install -e .[docs]
          pip install -e .
      - name: Generate API Documentation
        run: |
          python generate_api_docs.py
      - name: Extract Version
        run: |
          # Get version from SCM (setuptools_scm)
          python -c "from torchebm._version import version; print(f'VERSION={version}')" >> $GITHUB_ENV
      - name: Setup gh-pages branch
        run: |
          # Make sure we have clean working directory first
          # First commit any changes generated by your API doc script
          # The -e flag for grep returns non-zero if no changes, so we use || true to prevent failing
          git status --porcelain | grep -e "docs/" -e "mkdocs.yml" || true
          
          # Check if there are changes to commit
          if [[ -n "$(git status --porcelain docs/ mkdocs.yml)" ]]; then
            echo "Changes detected in documentation files, committing them..."
            git add docs/
            git add mkdocs.yml
            git commit -m "Update API documentation"
          else
            echo "No changes to commit in documentation files"
          fi

          # Initialize gh-pages branch if it doesn't exist
          git fetch origin gh-pages || git checkout --orphan gh-pages
          if ! git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            # If gh-pages doesn't exist on remote, create it
            git checkout --orphan gh-pages
            git rm -rf .
            touch .nojekyll
            git add .nojekyll
            git commit -m "Initialize gh-pages branch"
            git push -u origin gh-pages
            git checkout -
          else
            # If it exists, ensure we have it locally
            git checkout gh-pages || git checkout -b gh-pages origin/gh-pages
            # Make sure it's up to date
            git pull origin gh-pages
            git checkout -
          fi
      - name: Extract clean version
        run: |
          # Extract clean version without build metadata for mike
          CLEAN_VERSION=$(echo $VERSION | cut -d'+' -f1)
          echo "CLEAN_VERSION=${CLEAN_VERSION}" >> $GITHUB_ENV
      - name: Build Documentation
        run: |
          # Print MkDocs configuration
          echo "MkDocs configuration:"
          cat mkdocs.yml | grep -E "site_dir|docs_dir" || echo "No site_dir or docs_dir specified in mkdocs.yml"
          
          # First build the documentation to generate the site directory
          mkdocs build -v
          
          # Check the output directory after build
          echo "Directories after build:"
          ls -la
          
          # Create .nojekyll file in the root to prevent GitHub Pages from using Jekyll
          touch .nojekyll
          
          # Make sure the site directory exists before creating .nojekyll inside it
          if [ -d "site" ]; then
            touch site/.nojekyll
            echo "Site directory found, created .nojekyll inside it"
          else
            echo "Warning: Site directory not found. Checking alternative directories..."
            for dir in public/ _site/ build/ docs/site/ site_docs/; do
              if [ -d "$dir" ]; then
                echo "Found alternative directory: $dir"
                touch "$dir/.nojekyll"
                # Create symlink to make things consistent
                ln -sf "$dir" site
                break
              fi
            done
          fi
      - name: Deploy with Mike
        run: |
          # Check that we have a valid version to deploy
          if [ -z "${CLEAN_VERSION}" ]; then
            echo "Error: No version found to deploy"
            exit 1
          fi

          echo "Deploying version: ${CLEAN_VERSION}"
          
          # List current mike versions
          mike list || echo "No versions found yet"
          
          # Print mike configuration
          echo "Mike configuration:"
          mike --help
          
          # Verify site directory exists before deploying
          if [ ! -d "site" ]; then
            echo "Error: 'site' directory not found. Cannot deploy with mike."
            exit 1
          fi
          
          # Deploy with Mike - first remove latest alias if it exists
          mike delete --push latest || true
          
          # Deploy the new version and set it as latest
          mike deploy --push --update-aliases ${CLEAN_VERSION} latest
          
          # Set default version to latest
          mike set-default --push latest
          
          echo "Deployment completed successfully!"